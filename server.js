const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});

const PORT = process.env.PORT || 3000;
const NODE_ENV = process.env.NODE_ENV || 'development';

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(path.join(__dirname)));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–º–Ω–∞—Ç –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
const rooms = new Map();

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
io.on('connection', (socket) => {
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
    socket.on('join-room', (data) => {
        const { roomId, userName } = data;
        
        // –ü–æ–∫–∏–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if (socket.currentRoom) {
            socket.leave(socket.currentRoom);
            removeUserFromRoom(socket.currentRoom, socket.id);
        }

        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
        socket.join(roomId);
        socket.currentRoom = roomId;
        socket.userName = userName;

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
        if (!rooms.has(roomId)) {
            rooms.set(roomId, new Map());
        }
        
        const room = rooms.get(roomId);
        room.set(socket.id, {
            id: socket.id,
            name: userName,
            isMuted: false
        });

        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
        socket.to(roomId).emit('user-joined', {
            id: socket.id,
            name: userName,
            isMuted: false
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const participants = Array.from(room.values());
        socket.emit('room-participants', participants);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        socket.emit('joined-room', { roomId, participants });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC —Å–∏–≥–Ω–∞–ª–æ–≤
    socket.on('offer', (data) => {
        socket.to(data.target).emit('offer', {
            offer: data.offer,
            sender: socket.id
        });
    });

    socket.on('answer', (data) => {
        socket.to(data.target).emit('answer', {
            answer: data.answer,
            sender: socket.id
        });
    });

    socket.on('ice-candidate', (data) => {
        socket.to(data.target).emit('ice-candidate', {
            candidate: data.candidate,
            sender: socket.id
        });
    });

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    socket.on('toggle-mute', (isMuted) => {
        if (socket.currentRoom) {
            const room = rooms.get(socket.currentRoom);
            if (room && room.has(socket.id)) {
                room.get(socket.id).isMuted = isMuted;
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
                socket.to(socket.currentRoom).emit('user-muted', {
                    id: socket.id,
                    isMuted: isMuted
                });
            }
        }
    });

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∫–æ–º–Ω–∞—Ç—ã
    socket.on('leave-room', () => {
        if (socket.currentRoom) {
            removeUserFromRoom(socket.currentRoom, socket.id);
            socket.to(socket.currentRoom).emit('user-left', socket.id);
            socket.leave(socket.currentRoom);
            socket.currentRoom = null;
        }
    });

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    socket.on('disconnect', () => {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
        
        if (socket.currentRoom) {
            removeUserFromRoom(socket.currentRoom, socket.id);
            socket.to(socket.currentRoom).emit('user-left', socket.id);
        }
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
function removeUserFromRoom(roomId, userId) {
    if (rooms.has(roomId)) {
        const room = rooms.get(roomId);
        room.delete(userId);
        
        // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è
        if (room.size === 0) {
            rooms.delete(roomId);
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåç –†–µ–∂–∏–º: ${NODE_ENV}`);
    if (NODE_ENV === 'development') {
        console.log(`üì± –õ–æ–∫–∞–ª—å–Ω–æ: http://localhost:${PORT}`);
    } else {
        console.log(`üåê –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞!`);
    }
    console.log(`üé§ –ì–æ—Ç–æ–≤ –∫ –∞—É–¥–∏–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è–º!`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (err) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', reason);
});